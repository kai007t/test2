// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/use//
// Â© kai0072//

//@version=5
indicator("M5 Algorithm v5.9", overlay=true)////////////

//Highlight Monday-----------------------------------------------------------------------------------------------------------------------
earlyhour = 2
latehour = 24
enSun = input(true, title="Highlight Sunday.?")
isSun() => dayofweek(time('D')) == dayofweek.sunday and close ? 1 : 0
bgcolor(enSun and isSun() ? (isSun() ? color.new(#0084ff, 85) : na) : na)

//Get pip size---------------------------------------------------------------------------------------------------------------------------

// GetPipSize() returns the instrument's pip size. Returns the 
// tick size for non-forex instruments, and the pip size (based 
// on whole pips) for forex currency pairs.
GetPipSize() =>
    syminfo.mintick * (syminfo.type == "forex" ? 10 : 1)
    //syminfo.mintick * (syminfo.type == "cfd" ? 100 : 1)
    //syminfo.mintick * (syminfo.type == "futures" ? 2.5 : 1)

//====================================================================
//Enter ATR Inputs
atrLength =48

//ATR Function
ma_function(source, atrLength) => ta.rma(source, atrLength)
	
truncate(number, decimals) =>
    factor = math.pow(24, decimals)
    int(number * factor) / factor
    
atr = truncate(ma_function(ta.tr(true), atrLength),5)

Multiplier = input.int(100, title="Multiplier")



//Candle count
Bars_Since = input.int(48, title="Bars Since")//
pips = input.int(3, title="Pip Bands")

//TIME-----------------------------------------------------------------------------------------------------------------------
// Define the start and end hours in AST
highlightStartHour = 19
highlightEndHour = 12

// Calculate the current hour in AST
currentHour = hour(time - timestamp("GMT-4"))

// Check if the current hour is within the specified range
inHighlightRange = currentHour >= highlightStartHour or currentHour < highlightEndHour

// Plot a colored background for the specified time range
//bgcolor(inHighlightRange ? color.new(#2195f3, 66) : na)

//-----------------------------------------------------------------------------------------------------------------------

//C1---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//EMA 20
EMA20_len = input.int(18, minval=1, title="Length")
EMA20_src = close
EMA20_out = ta.ema(EMA20_src, EMA20_len)
plot(EMA20_out, title="EMA20", color=#00bfff , transp=0, linewidth=2)

//ATR Bands
EMAA144Band1 = EMA20_out+1.0*atr
EMAA144Band2 = EMA20_out-1.0*atr
// p1 = plot(EMAA144Band1, title="EMA1", color=color.rgb(255, 0, 0), style = plot.style_line )
// p2 = plot(EMAA144Band2, title="EMA1", color=color.rgb(255, 0, 0), style = plot.style_line )

//EMA 144
EMA144_len = input.int(144, minval=1, title="Length")
EMA144_src = close
EMA144_out = ta.ema(EMA144_src, EMA144_len)
plot(EMA144_out, title="EMA144", color=color.orange, transp=40, linewidth=1)

//EMA 288
EMA288_len = input.int(288, minval=1, title="Length")
EMA288_src = close
EMA288_out = ta.ema(EMA288_src, EMA288_len)
//plot(EMA288_out, title="EMA144", color=color.yellow, transp=40, linewidth=1)


//EMA 576
EMA576_len = input.int(576, minval=1, title="Length")
EMA576_src = close
EMA576_out = ta.ema(EMA576_src, EMA576_len)
plot(EMA576_out, title="EMA576", color=color.rgb(143, 0, 255, 50), linewidth=3)


pipOffset = pips * GetPipSize()
upperBand = EMA20_out + pipOffset
lowerBand = EMA20_out - pipOffset

plot(upperBand, color=color.rgb(255, 0, 0, 50), title="Upper Band", linewidth = 1)
plot(lowerBand, color=color.rgb(255, 0, 0, 50), title="Lower Band", linewidth = 1)



EMA_Long1  = EMA20_out > EMA144_out and close > EMA576_out and EMA20_out > EMA576_out
EMA_Short1 = EMA20_out < EMA144_out and close < EMA576_out and EMA20_out < EMA576_out



//MACD 20144---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fastLength1 = input.int(20, minval=1)
slowLength1 = input.int(144,minval=1)
length1 = input.int(12, minval=1, title="BB Periods")
dev1 = input.float(1.2, minval=0.0001, title="Deviation1")

fastMA1 = ta.ema(close, fastLength1)
slowMA1 = ta.ema(close, slowLength1)
macd1 = (fastMA1 - slowMA1)/(GetPipSize()*Multiplier)

Std1 = ta.stdev(macd1, length1)
basis1 = ta.sma(macd1,length1)

//BollingerBands1
Upper1 = (Std1 * dev1 + (ta.sma(macd1, length1)))
Lower1 = ((ta.sma(macd1, length1)) - (Std1 * dev1))

BBMacdL1 = macd1>0.05 and macd1<0.1 and macd1>basis1
BBMacdS1 = macd1<-0.05 and macd1>-0.1 and macd1<basis1

BBMacdL2 = macd1>0.101 and macd1<0.2 and macd1>basis1
BBMacdS2 = macd1<-0.101 and macd1>-0.2 and macd1<basis1

BBMacdL3 = macd1>0.151 and macd1<0.20 and macd1>basis1
BBMacdS3 = macd1<-0.151 and macd1>-0.20 and macd1<basis1

BBMacdL4 = macd1>0.201 and macd1<0.25 and macd1>basis1
BBMacdS4 = macd1<-0.201 and macd1>-0.25 and macd1<basis1

//---------------------------------
macd1_buy  = macd1 > 0.08  and macd1 < 0.25  and macd1 > basis1
macd1_sell = macd1 < -0.08 and macd1 > -0.25 and macd1 < basis1

//-----------------------------------------------------------------------------------------------


//MACD 20288---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fastLength2 = input.int(20, minval=1)
slowLength2 = input.int(288,minval=1)
length2 = input.int(12, minval=1, title="BB Periods")
dev2 = input.float(1.2, minval=0.0001, title="Deviation1")

fastMA2 = ta.ema(close, fastLength2)
slowMA2 = ta.ema(close, slowLength2)
macd2 = (fastMA2 - slowMA2)/(GetPipSize()*Multiplier)

Std2 = ta.stdev(macd2, length2)
basis2 = ta.sma(macd2,length2)

//BollingerBands2
Upper2 = (Std2 * dev2 + (ta.sma(macd2, length2)))
Lower2 = ((ta.sma(macd2, length2)) - (Std2 * dev2))

BBMacdL1_2 = macd2>0.05 and macd2<0.08 and macd2>basis2
BBMacdS1_2 = macd2<-0.05 and macd2>-0.08 and macd2<basis2

BBMacdL2_2 = macd2>0.0801 and macd2<0.1 and macd2>basis2
BBMacdS2_2 = macd2<-0.0801 and macd2>-0.1 and macd2<basis2

BBMacdL3_2 = macd2>0.101 and macd2<0.15 and macd2>basis2
BBMacdS3_2 = macd2<-0.101 and macd2>-0.15 and macd2<basis2

BBMacdL4_2 = macd2>0.151 and macd2<0.2 and macd2>basis2
BBMacdS4_2 = macd2<-0.151 and macd2>-0.2 and macd2<basis2

BBMacdL5_2 = macd2>0.201 and macd2<0.25 and macd2>basis2
BBMacdS5_2 = macd2<-0.201 and macd2>-0.25 and macd2<basis2

//---------------------------------
macd2_buy  = macd2 > 0.07  and macd2 < 0.25  and macd2 > basis2
macd2_sell = macd2 < -0.07 and macd2 > -0.25 and macd2 < basis2


//-----------------------------------------------------------------------------------------------


//OSMA MTF 2--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


calcBaseUnit() =>
    bool  isForexSymbol = syminfo.type     == "forex"
    bool  isYenPair     = syminfo.currency == "JPY"
    float result = isForexSymbol ? isYenPair ? 0.01 : 0.0001 : syminfo.mintick


//User Inputs
fastMA = input.int(title="Fast MA Period", defval = 108, minval = 3)
slowMA = input.int(title="Slow MA Period", defval = 1920, minval = 3)
signal = input.int(title="MACD MA Period", defval = 48, minval = 3)

macdtype = input.string("Double Smoothed Exponential Moving Average - DSEMA", "MACD MA Type")


useCurrentRes = input(false, title="Use Current Chart Resolution?")
resCustom = input(title="Use Different Timeframe? Uncheck Box Above", defval="15")
res = useCurrentRes ? timeframe.period : resCustom


//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//OSMA MTF H4

//User Inputs
fastMAH4 = input.int(title="Fast MA Period", defval = 96, minval = 3)
slowMAH4 = input.int(title="Slow MA Period", defval = 3840, minval = 3)
signalH4 = input.int(title="MACD MA Period", defval = 16, minval = 3)

macdtypeH4 = input.string("Double Smoothed Exponential Moving Average - DSEMA", "MACD MA Type")

import loxx/loxxmas/1
src = input.source(close, "Source")


useCurrentResH4 = input(false, title="Use Current Chart Resolution?")
resCustomH4 = input(title="Use Different Timeframe? Uncheck Box Above", defval="60")
resH4 = useCurrentResH4 ? timeframe.period : resCustomH4


variant(type, src, len) =>
    sig = 0.0
    trig = 0.0
    special = false
    if type == "Double Smoothed Exponential Moving Average - DSEMA"
        [t, s, b] = loxxmas.dsema(src, len)
        sig := s
        trig := t
        special := b
    
    else if type == "Super Smoother"
        [t, s, b] = loxxmas.super(src, len)
        sig := s
        trig := t
        special := b
    trig


//MACD
macdH4 = variant(macdtypeH4, src, fastMAH4) - variant(macdtypeH4, src, slowMAH4) 
signal22 = variant(macdtypeH4, macdH4, signalH4)
//hist = (macd - signal2)

//OsMA
OSMAH4 =  (macdH4 - signal22) / (GetPipSize()*Multiplier)
outOSMAH4 = request.security(syminfo.tickerid, resH4, OSMAH4, lookahead=barmerge.lookahead_on)

outOSMAH4_buy = outOSMAH4 > outOSMAH4[12] and outOSMAH4 > 0.015
outOSMAH4_sell = outOSMAH4 < outOSMAH4[12] and outOSMAH4 < -0.015
//------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MMT


//User Inputs
mmtfastMA = input.int(title="Fast MA Period", defval = 192, minval = 3)
mmtslowMA = input.int(title="Slow MA Period", defval = 30720, minval = 3)
mmtsignal = input.int(title="MACD MA Period", defval = 96, minval = 3)
mmtshift = input.int(title="MACD Shift", defval = 10, minval = 3)

mmtmacdtype = input.string("Double Smoothed Exponential Moving Average - DSEMA", "MACD MA Type")

mmtuseCurrentRes = input(false, title="Use Current Chart Resolution?")
mmtresCustom = input(title="Use Different Timeframe? Uncheck Box Above", defval="60")
mmtres = mmtuseCurrentRes ? timeframe.period : mmtresCustom


mmtvariant(type, src, mmtlen) =>
    sig = 0.0
    trig = 0.0
    special = false
    if type == "Double Smoothed Exponential Moving Average - DSEMA"
        [t, s, b] = loxxmas.dsema(src, mmtlen)
        sig := s
        trig := t
        special := b
    
    else if type == "Super Smoother"
        [t, s, b] = loxxmas.super(src, mmtlen)
        sig := s
        trig := t
        special := b
    trig

mmtf_bb(src, mmtlength, mult, type) =>
    float basis = variant(type, src, mmtlength)
    float dev = mult * ta.stdev(src, mmtlength)
    [basis, basis + dev, basis - dev]




mmtfastMA1 = ta.ema(close, mmtfastMA)

//MACD
mmtmacd = mmtfastMA1 - variant(mmtmacdtype, src, mmtslowMA) 
mmtsignal2 = variant(mmtmacdtype, mmtmacd, mmtsignal)
//hist = (macd - signal2)

//OsMA
mmtOSMA =  (mmtmacd - mmtsignal2) / (GetPipSize() * Multiplier)
mmtoutOSMA = request.security(syminfo.tickerid, mmtres, mmtOSMA, lookahead=barmerge.lookahead_on)

mmt_buy  = mmtoutOSMA > mmtoutOSMA[12] and mmtoutOSMA >  0.009
mmt_sell = mmtoutOSMA < mmtoutOSMA[12] and mmtoutOSMA < -0.009

mmt_buy1  = mmtoutOSMA > mmtoutOSMA[12] and mmtoutOSMA >  0.009 and mmtoutOSMA <  0.03
mmt_sell1 = mmtoutOSMA < mmtoutOSMA[12] and mmtoutOSMA < -0.009 and mmtoutOSMA >  -0.03

// bgcolor(mmt_buy ? color.green : mmt_sell ? color.red : na, transp = 85)

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//MACD MTF H4//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

src4 = input.source(close, "Source")
//User Inputs
fastLength4 = input.int(title="Fast MA Period", defval = 8, minval = 3)
slowLength4 = input.int(title="Slow MA Period", defval = 26, minval = 3)
length4 = input.int(title="MACD MA Period", defval = 6, minval = 3)
dev4 = input.float(1, minval=0.0001, title="Deviations")

useCurrentRes4 = input(false, title="Use Current Chart Resolution?")
resCustom4 = input(title="Use Different Timeframe? Uncheck Box Above", defval="240")
res4 = useCurrentRes4 ? timeframe.period : resCustom4


fastMA4 = ta.ema(close, fastLength4)
slowMA4 = ta.ema(close, slowLength4)
macd4 = (fastMA4 - slowMA4)/(GetPipSize()*Multiplier)
outMACD4 = request.security(syminfo.tickerid, res4, macd4, lookahead=barmerge.lookahead_on)

Std4 = ta.stdev(macd4, length4)
basis4 = ta.sma(macd4,length4)

Upper4 = (Std4 * dev4 + (ta.sma(macd4, length4)))
Lower4 = ((ta.sma(macd4, length4)) - (Std4 * dev4))
outUpper4 = request.security(syminfo.tickerid, res4, Upper4, lookahead=barmerge.lookahead_on)
outLower4 = request.security(syminfo.tickerid, res4, Lower4, lookahead=barmerge.lookahead_on)
outBasis4 = request.security(syminfo.tickerid, res4, basis4, lookahead=barmerge.lookahead_on)

macd_buy4 = outMACD4 > outUpper4 and outMACD4 > -1
macd_sell4 = outMACD4 < outLower4 and outMACD4 < 1

////--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//MACD MTF D720//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

src5 = input.source(close, "Source")
//User Inputs
fastLength5 = input.int(title="Fast MA Period", defval = 6, minval = 3)
slowLength5 = input.int(title="Slow MA Period", defval = 160, minval = 3)
length5 = input.int(title="MACD MA Period", defval = 5, minval = 3)
dev5 = input.float(1, minval=0.0001, title="Deviations")

useCurrentRes6 = input(false, title="Use Current Chart Resolution?")
resCustom6 = input(title="Use Different Timeframe? Uncheck Box Above", defval="720")
res6 = useCurrentRes6 ? timeframe.period : resCustom6


fastMA5 = ta.ema(close, fastLength5)
slowMA5 = ta.ema(close, slowLength5)
macd5 = (fastMA5 - slowMA5)/(GetPipSize()*Multiplier)
outMACD5 = request.security(syminfo.tickerid, res6, macd5, lookahead=barmerge.lookahead_on)

Std5 = ta.stdev(macd5, length5)
basis5 = ta.sma(macd5,length5)

Upper5 = (Std5 * dev5 + (ta.sma(macd5, length5)))
Lower5 = ((ta.sma(macd5, length5)) - (Std5 * dev5))
outUpper5 = request.security(syminfo.tickerid, res6, Upper5, lookahead=barmerge.lookahead_on)
outLower5 = request.security(syminfo.tickerid, res6, Lower5, lookahead=barmerge.lookahead_on)
outBasis5 = request.security(syminfo.tickerid, res6, basis5, lookahead=barmerge.lookahead_on)

macd_buy5  = outMACD5 > outUpper5 //and outMACD5 > -1
macd_sell5 = outMACD5 < outLower5 //and outMACD5 < 1



////--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//Plot----------------------------------------------------------------------------------------------------------------------------------------------------------

color1 = color.rgb(255, 0, 0, 0)
color2 = color.rgb(255, 255, 0, 0)
color3 = color.rgb(6, 255, 251, 0)

size1 = size.tiny


//OSMA H4 D1 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

pos2_buy  = EMA20_out - (15*GetPipSize())
pos2_sell = EMA20_out + (15*GetPipSize())
char2 = 'â¦'

//          20144         20288                         963840              826           6160
RangeL1_2 = BBMacdL1 and macd2_buy  and EMA_Long1  and outOSMAH4_buy  and macd_buy4  and macd_buy5
RangeS1_2 = BBMacdS1 and macd2_sell and EMA_Short1 and outOSMAH4_sell and macd_sell4 and macd_sell5

RangeL2_2 = BBMacdL2 and macd2_buy  and EMA_Long1  and outOSMAH4_buy  and macd_buy4  and macd_buy5
RangeS2_2 = BBMacdS2 and macd2_sell and EMA_Short1 and outOSMAH4_sell and macd_sell4 and macd_sell5

RangeL3_2 = BBMacdL3 and macd2_buy  and EMA_Long1  and outOSMAH4_buy  and macd_buy4  and macd_buy5
RangeS3_2 = BBMacdS3 and macd2_sell and EMA_Short1 and outOSMAH4_sell and macd_sell4 and macd_sell5


plotchar(RangeL1_2 ? pos2_buy : na,  color = color1, char = char2, size = size1, location = location.absolute)
plotchar(RangeS1_2 ? pos2_sell : na, color = color1, char = char2, size = size1, location = location.absolute)

plotchar(RangeL2_2 ? pos2_buy : na,  color = color2, char = char2, size = size1, location = location.absolute)
plotchar(RangeS2_2 ? pos2_sell : na, color = color2, char = char2, size = size1, location = location.absolute)

plotchar(RangeL3_2 ? pos2_buy : na,  color = color3, char = char2, size = size1, location = location.absolute)
plotchar(RangeS3_2 ? pos2_sell : na, color = color3, char = char2, size = size1, location = location.absolute)



//MMT + H4----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

pos3_buy  = EMA20_out - (15*GetPipSize())//
pos3_sell = EMA20_out + (15*GetPipSize())
char3 = 'â¦'
size2 = size.tiny


RangeL1_3 = BBMacdL1 and macd2_buy  and EMA_Long1  and mmt_buy  and macd_buy4
RangeS1_3 = BBMacdS1 and macd2_sell and EMA_Short1 and mmt_sell and macd_sell4

RangeL2_3 = BBMacdL2 and macd2_buy  and EMA_Long1  and mmt_buy  and macd_buy4
RangeS2_3 = BBMacdS2 and macd2_sell and EMA_Short1 and mmt_sell and macd_sell4

RangeL3_3 = BBMacdL3 and macd2_buy  and EMA_Long1  and mmt_buy  and macd_buy4
RangeS3_3 = BBMacdS3 and macd2_sell and EMA_Short1 and mmt_sell and macd_sell4


// plotchar(RangeL1_3 ? pos3_buy : na,  color = color1, char = char3, size = size1, location = location.absolute)
// plotchar(RangeS1_3 ? pos3_sell : na, color = color1, char = char3, size = size1, location = location.absolute)

plotchar(RangeL2_3 ? pos3_buy : na,  color = color2, char = char3, size = size2, location = location.absolute)
plotchar(RangeS2_3 ? pos3_sell : na, color = color2, char = char3, size = size2, location = location.absolute)

plotchar(RangeL3_3 ? pos3_buy : na,  color = color3, char = char3, size = size2, location = location.absolute)
plotchar(RangeS3_3 ? pos3_sell : na, color = color3, char = char3, size = size2, location = location.absolute)


if RangeL2_3
    alert("Range2 + MMT + H4 + Buy", alert.freq_once_per_bar_close)

if RangeS2_3
    alert("Range2 + MMT + H4 + Sell", alert.freq_once_per_bar_close)

if RangeL3_3
    alert("Range3 + MMT + H4 Buy", alert.freq_once_per_bar_close)

if RangeS3_3
    alert("Range3 + MMT + H4 Sell", alert.freq_once_per_bar_close)//


//--------------------------------------------------------------------------------------------------------------------

//MMT H4 D----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

RangeL1_3_2 = BBMacdL1 and macd2_buy  and EMA_Long1  and mmt_buy  and macd_buy4  and macd_buy5
RangeS1_3_2 = BBMacdS1 and macd2_sell and EMA_Short1 and mmt_sell and macd_sell4 and macd_sell5

RangeL2_3_2 = BBMacdL2 and macd2_buy  and EMA_Long1  and mmt_buy  and macd_buy4  and macd_buy5
RangeS2_3_2 = BBMacdS2 and macd2_sell and EMA_Short1 and mmt_sell and macd_sell4 and macd_sell5

RangeL3_3_2 = BBMacdL3 and macd2_buy  and EMA_Long1  and mmt_buy  and macd_buy4  and macd_buy5
RangeS3_3_2 = BBMacdS3 and macd2_sell and EMA_Short1 and mmt_sell and macd_sell4 and macd_sell5



if RangeL2_3_2
    alert("Range2 + MMT + H4 + D Buy", alert.freq_once_per_bar_close)

if RangeS2_3_2
    alert("Range2 + MMT + H4 + D Sell", alert.freq_once_per_bar_close)

if RangeL3_3_2
    alert("Range3 + MMT + H4 + D Buy", alert.freq_once_per_bar_close)

if RangeS3_3_2
    alert("Range3 + MMT + H4 + D Sell", alert.freq_once_per_bar_close)//




//D1 MACD ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pos4_buy  = EMA576_out //+ (5*GetPipSize())
pos4_sell = EMA576_out //- (5*GetPipSize())
char4 = 'â¦'
color4 = color.rgb(255, 0, 255)



//          20144         20288                           380 
// RangeL1_4 = BBMacdL1 and macd2_buy  and EMA_Long1  and macd_buy5
// RangeS1_4 = BBMacdS1 and macd2_sell and EMA_Short1 and macd_sell5

// RangeL2_4 = BBMacdL2 and macd2_buy  and EMA_Long1  and macd_buy5
// RangeS2_4 = BBMacdS2 and macd2_sell and EMA_Short1 and macd_sell5

// RangeL3_4 = BBMacdL3 and macd2_buy  and EMA_Long1  and macd_buy5
// RangeS3_4 = BBMacdS3 and macd2_sell and EMA_Short1 and macd_sell5



// plotchar(RangeL1_2 ? pos2_buy : na,  color = color1, char = char2, size = size1, location = location.absolute)
// plotchar(RangeS1_2 ? pos2_sell : na, color = color1, char = char2, size = size1, location = location.absolute)

// plotchar(RangeL2_4 ? pos4_buy : na,  color = color4, char = char4, size = size1, location = location.absolute)
// plotchar(RangeS2_4 ? pos4_sell : na, color = color4, char = char4, size = size1, location = location.absolute)

// plotchar(RangeL3_4 ? pos4_buy : na,  color = color4, char = char4, size = size1, location = location.absolute)
// plotchar(RangeS3_4 ? pos4_sell : na, color = color4, char = char4, size = size1, location = location.absolute)


//------------------------------------------------------------------------------------------------------------------------


// Define input for higher timeframe
tf_input = input.string(title="Higher Timeframe",  defval="240", options=["D", "W", "240"])

// Calculate high and low conditions
highCondition = high[1] > high[0] and high[1] > high[2]
lowCondition = low[1] < low[0] and low[1] < low[2]

// Set plot colors and styles
highColor = color.green
lowColor = color.red
lineStyle = line.style_solid
lineWidth = 1

// Calculate highest and lowest points on higher timeframe
highestPoint = request.security(syminfo.tickerid, tf_input, high[1] == ta.highest(high, 3) ? high[1] : na, lookahead=barmerge.lookahead_on)
lowestPoint = request.security(syminfo.tickerid, tf_input, low[1] == ta.lowest(low, 3) ? low[1] : na, lookahead=barmerge.lookahead_on)


// Plot highest and lowest points
plot(highestPoint, "Highest Point", color=color.rgb(0, 255, 8,0), linewidth=lineWidth, style = plot.style_circles, offset = -48)
plot(lowestPoint, "Lowest Point", color=color.rgb(255, 0, 0,0),  linewidth=lineWidth, style = plot.style_circles, offset = -48)



//-----------------------------------------------------------------------------------------------------


// greencolor = #2DD204
// redcolor = #D2042D 

// //Double Smoothed Exponential Moving Average - DSEMA
// _dsema(src3, len3)=>
//     alpha = 2.0 / (1.0 + math.sqrt(len3))
//     _ema1 = 0., _ema2 = 0.
//     _ema1 := nz(_ema1[1]) + alpha * (src - nz(_ema1[1]))
//     _ema2 := nz(_ema2[1]) + alpha * (_ema1 - nz(_ema2[1]))
//     [_ema2, _ema2[1], false]



// srcoption3 = input.string("Close", "SMA Source Options", group= "Basic Settings", 
//      options = ["Close"])


// len3 = input.int(1920, "Period", minval = 1, group = "Basic Settings")
// type3 = input.string("Double Smoothed Exponential Moving Average - DSEMA", options = ["Double Smoothed Exponential Moving Average - DSEMA"], group = "Basic Settings")
// rclose = close 

// useCurrentResH41 = input(false, title="Use Current Chart Resolution?")
// resCustomH41 = input(title="Use Different Timeframe? Uncheck Box Above", defval="60")
// resH41 = useCurrentResH41 ? timeframe.period : resCustomH41


// float src3 = switch srcoption3
// 	"Close" => rclose


// variant3(type, src2, len3) =>
//     sig3 = 0.0
//     trig3 = 0.0
//     special3 = false
 
//     if type == "Double Smoothed Exponential Moving Average - DSEMA"
//         [t3, s3, b3] = _dsema(src3, len3)
//         sig3 := s3
//         trig3 := t3
//         special3 := b3
    
//     [trig3, sig3, special3]

// [trig3, sig3, special3] = variant3(type3, src3, len3)

// outtrig3 = request.security(syminfo.tickerid, resH41, trig3, lookahead=barmerge.lookahead_on)
// outsig3 = request.security(syminfo.tickerid, resH41, sig3, lookahead=barmerge.lookahead_on)
// plot(outtrig3, "Moving Average", color = outtrig3 > outsig3 ? greencolor : redcolor, linewidth = 2, transp = 40)

//-----------------------------------------------------------------------------------------------------
//Time plot

// Define the start and end hours
startHour1 = 5
endHour1 = 23

NY_Golden_startHour1 = 8
NY_Golden_endHour1 = 11

// Get the hour of the current candle
//currentHour = hour(time)

// Check if the current hour is within the specified range
isInSession = currentHour >= startHour1 and currentHour < endHour1
NY_Golden_isInSession = currentHour >= NY_Golden_startHour1 and currentHour < NY_Golden_endHour1


// Plot a dot at the low of the candle if it is within the specified time range
plotchar(isInSession ? pos4_buy : na,  color = color4, char = char4, size = size1, location = location.absolute)
plotchar(NY_Golden_isInSession ? pos4_buy : na,  color = color.yellow, char = char4, size = size1, location = location.absolute)



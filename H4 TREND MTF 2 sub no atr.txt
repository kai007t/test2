// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/use
// © kai0072

//@version=5
indicator("H4 TREND MTF 2 sub - no atr", overlay=false)///////


//Get pip size---------------------------------------------------------------------------------------------------------------------------

// GetPipSize() returns the instrument's pip size. Returns the 
// tick size for non-forex instruments, and the pip size (based 
// on whole pips) for forex currency pairs.
GetPipSize() =>
    syminfo.mintick * (syminfo.type == "forex" ? 10 : 1)
    //syminfo.mintick * (syminfo.type == "futures" ? 2.5 : 1)

//====================================================================

//====================================================================
//Enter ATR Inputs
atrLength =15

//ATR Function
ma_function(source, atrLength) => ta.rma(source, atrLength)
	
truncate(number, decimals) =>
    factor = math.pow(24, decimals)
    int(number * factor) / factor
    
atr = truncate(ma_function(ta.tr(true), atrLength),5)

//-----------------------------------------------------------------

offset1 = input.int(10, minval=1)



if (timeframe.period == "15")
    offset1 := 16

    
if (timeframe.period == "30")
    offset1 := 8


if (timeframe.period == "60")
    offset1 := 4


if (timeframe.period == "120")
    offset1 := 2


if (timeframe.period == "180")
    offset1 := 1

    
if (timeframe.period == "240")
    offset1 := 1



//------------------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------

atr_mult = input.float(1.2, minval=0.1, title="ATR Mult")


greencolor = #2DD204
redcolor = #D2042D 
src = input.source(close, "Source")

EMA_len = input.int(12, minval=1, title="Length")
EMA_src = close
EMA_out = ta.ema(EMA_src, EMA_len)


EMA_len2 = input.int(60, minval=1, title="Length")
EMA_out2 = ta.ema(EMA_src, EMA_len2)
//plot(EMA_out2, "Moving Average", color = #006aff, linewidth = 2, transp = 40)

// EMA_len3 = input.int(120, minval=1, title="Length")
// EMA_out3 = ta.ema(EMA_src, EMA_len3)
//plot(EMA_out3, "Moving Average", color = #ffe500, linewidth = 2, transp = 0)


upperBand = EMA_out + atr_mult*atr
lowerBand = EMA_out - atr_mult*atr


//--------------------------------------------------------------


//Double Smoothed Exponential Moving Average - DSEMA
_dsema(src3, len3)=>
    alpha = 2.0 / (1.0 + math.sqrt(len3))
    _ema1 = 0., _ema2 = 0.
    _ema1 := nz(_ema1[1]) + alpha * (src - nz(_ema1[1]))
    _ema2 := nz(_ema2[1]) + alpha * (_ema1 - nz(_ema2[1]))
    [_ema2, _ema2[1], false]



srcoption3 = input.string("Close", "SMA Source Options", group= "Basic Settings", 
     options = ["Close"])


len3 = input.int(1920, "Period", minval = 1, group = "Basic Settings")
type3 = input.string("Double Smoothed Exponential Moving Average - DSEMA", options = ["Double Smoothed Exponential Moving Average - DSEMA"], group = "Basic Settings")
rclose = close 

useCurrentResH41 = input(false, title="Use Current Chart Resolution?")
resCustomH41 = input(title="Use Different Timeframe? Uncheck Box Above", defval="60")
resH41 = useCurrentResH41 ? timeframe.period : resCustomH41



float src3 = switch srcoption3
	"Close" => rclose


variant3(type, src2, len3) =>
    sig3 = 0.0
    trig3 = 0.0
    special3 = false
 
    if type == "Double Smoothed Exponential Moving Average - DSEMA"
        [t3, s3, b3] = _dsema(src3, len3)
        sig3 := s3
        trig3 := t3
        special3 := b3
    
    [trig3, sig3, special3]

[trig3, sig3, special3] = variant3(type3, src3, len3)



outtrig3 = request.security(syminfo.tickerid, resH41, trig3, lookahead=barmerge.lookahead_on)
outsig3 = request.security(syminfo.tickerid, resH41, sig3, lookahead=barmerge.lookahead_on)


//---------------------------------------------------------------------------


//MACD H4----------------------------------------------------------------------------

src4 = input.source(close, "Source")
//User Inputs
fastLength4 = input.int(title="Fast MA Period", defval = 8, minval = 3)
slowLength4 = input.int(title="Slow MA Period", defval = 26, minval = 3)
length4 = input.int(title="MACD MA Period", defval = 6, minval = 3)
dev4 = input.float(1, minval=0.0001, title="Deviations")


fastMA4 = ta.ema(close, fastLength4)
slowMA4 = ta.ema(close, slowLength4)
macd4 = (fastMA4 - slowMA4)/(GetPipSize()*100)

Std4 = ta.stdev(macd4, length4)
basis4 = ta.sma(macd4,length4)

Upper4 = (Std4 * dev4 + (ta.sma(macd4, length4)))
Lower4 = ((ta.sma(macd4, length4)) - (Std4 * dev4))

macd_buy4  = macd4 > Upper4 and macd4 > -1
macd_sell4 = macd4 < Lower4 and macd4 < 1

// macd_buy4  = macd4 > -1.0
// macd_sell4 = macd4 < 1.0


//--------------------------------------------------------------------------------------





//MACD D----------------------------------------------------------------------------------

src5 = input.source(close, "Source")
//User Inputs
fastLength5 = input.int(title="Fast MA Period", defval = 6, minval = 3)
slowLength5 = input.int(title="Slow MA Period", defval = 160, minval = 3)
length5 = input.int(title="MACD MA Period", defval = 4, minval = 3)
dev5 = input.float(1, minval=0.0001, title="Deviations")

useCurrentRes6 = input(false, title="Use Current Chart Resolution?")
resCustom6 = input(title="Use Different Timeframe? Uncheck Box Above", defval="720")
res6 = useCurrentRes6 ? timeframe.period : resCustom6


fastMA5 = ta.ema(close, fastLength5)
slowMA5 = ta.ema(close, slowLength5)
macd5 = (fastMA5 - slowMA5)/(GetPipSize()*10)
outMACD5 = request.security(syminfo.tickerid, res6, macd5, lookahead=barmerge.lookahead_on)

Std5 = ta.stdev(macd5, length5)
basis5 = ta.sma(macd5,length5)

Upper5 = (Std5 * dev5 + (ta.sma(macd5, length5)))
Lower5 = ((ta.sma(macd5, length5)) - (Std5 * dev5))
outUpper5 = request.security(syminfo.tickerid, res6, Upper5, lookahead=barmerge.lookahead_on)
outLower5 = request.security(syminfo.tickerid, res6, Lower5, lookahead=barmerge.lookahead_on)
outBasis5 = request.security(syminfo.tickerid, res6, basis5, lookahead=barmerge.lookahead_on)


macd_buy5  = outMACD5 > outUpper5 //and outMACD5 > 0
macd_sell5 = outMACD5 < outLower5 //and outMACD5 < 0


//-------------------------------------------------------------------------------------


//PLOT------------------------------------------------------------------------------------
color_buy = color.rgb(0, 255, 85)
color_sell = color.rgb(255, 0, 0)


size1 = size.small

pos1_buy  = 0
pos1_sell = 0
char1 = '⦁'

buy_condition  = macd_buy4  and macd_buy5  and close > EMA_out and close > EMA_out2 //and close < upperBand 
sell_condition = macd_sell4 and macd_sell5 and close < EMA_out and close < EMA_out2 //and close > lowerBand  



// buy_condition  =  macd_buy5
// sell_condition =  macd_sell5


// plotchar(RangeL1_3 ? pos3_buy : na,  color = color1, char = char3, size = size1, location = location.absolute)
// plotchar(RangeS1_3 ? pos3_sell : na, color = color1, char = char3, size = size1, location = location.absolute)

plotchar(buy_condition  ? pos1_buy : na,  color = color_buy,  char = char1, size = size1, location = location.absolute)
plotchar(sell_condition ? pos1_sell : na, color = color_sell, char = char1, size = size1, location = location.absolute)



if buy_condition
    alert("NNFX H4 Buy", alert.freq_once_per_bar_close)

if sell_condition
    alert("NNFX H4 Sell", alert.freq_once_per_bar_close)





//----------------------------------------------------------------------------------------------









